//INSTRUCTION:
//Look for ** using control-S
//Fill in the function body
//When done, compile queue.cpp to make sure it has no syntax errors

//=========================================================
//HW#: HW2 queue
//Your name: Kevyn Higbee
//Complier:  g++
//File type:  queue.cpp
//===========================================================

using namespace std;
#include <iostream>
#include "queue.h"  

// constructor 
queue::queue()
{
  count = 0;
  front = 0;
  rear = -1;
}

//destructor 
queue::~queue()
{

}

// PURPOSE: returns true if queue is empty, otherwise false
bool queue::isEmpty()
{
  return (count == 0);
}

// PURPOSE: returns true if queue is full, otherwise false
bool queue::isFull()
{
  return (count == MAX_SIZE);
}

// PURPOSE: if full, throws an exception Overflow
// if not full, enters an element at the rear 
// PAREMETER: provide the element (newElem) to be enqueued
void queue::enqueue(el_t newElem)
{
  if(isFull())
    throw Overflow();
  else
    {
      rear=(rear+1)%MAX_SIZE;
      el[rear]=newElem;
      count++;
    }
}

// PURPOSE: if empty, throw Underflow
// if not empty, dequeues the front element to give it back
// PARAMETER: provide a holder (dequeuedElem) for the element dequeued (pass by ref)
void queue::dequeue(el_t& dequeuedElem)
{
  if(isEmpty())
    throw Underflow();
  else
    {
      dequeuedElem=el[front];
      front=(front+1)%MAX_SIZE;
      count--;
    }
}

// PURPOSE: if empty, throws an exception Underflow
// if not empty, give back the front element (but does not dequeue it)
//PARAMETER: provide a holder (theElem) for the element (pass by ref)
void queue::frontElem(el_t& theElem)
{
  if(isEmpty())
    throw Underflow();
  else
    theElem = el[front];
}

// PURPOSE: returns the current size to make it 
// accessible to the client caller
int queue::getSize()
{
  return count;
}

// PURPOSE: display everything in the queue horizontally
// from front to rear enclosed in [   ]
// if empty, displays [ empty ]
void queue::displayAll()
{
  int j = front;  // counter for element index

  cout << "[ ";
  if(!isEmpty())
    {
   for (int i = 1; i <= count; i++)
     { 
       cout << el[(j++)%MAX_SIZE] << endl;
     }
    }
  else
    cout << "empty ";
   cout << "]" << endl;   

}

// PURPOSE: if empty, throws an exception Underflow
//if queue has just 1 element, does nothing
//if queue has more than 1 element, moves the front one to the rear by
//calling dequeue followed by enqueue.
void queue::goToBack()
{           
  el_t elm;  // temp variable to hold front so we can move it to back
  if(count != 1)
    {
      if(isEmpty())
	throw Underflow();
      else
	{
	  dequeue(elm);
	  enqueue(elm);
	}
    }
    
}

